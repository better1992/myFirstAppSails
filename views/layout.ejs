<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/vendor/socket.io-client/support/test-runner/public/stylesheets/main.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/reset.css">
    <link rel="stylesheet" href="/styles/style.css">
    <!--STYLES END-->
    </head>

  <body>
    <div class="container">     
        <nav class="navbar navbar-inverse">
            <div class="container-fluid">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span> 
                    </button>
                    <a class="navbar-brand" href="#">WebSiteName</a>
                </div>
                <div class="collapse navbar-collapse" id="myNavbar">
                    <ul class="nav navbar-nav">
                        <li class="active"><a href="#">Home</a></li>
                        <li><a href="#">Page 1</a></li>
                        <li><a href="#">Page 2</a></li> 
                        <li><a href="#">Page 3</a></li> 
                    </ul>
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="/user/new">Sign Up</a></li>
                        <li><a href="/user/login">Login</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </div>
    <%- body %>
    <div class="container">
        <hr>
        <footer class="footer">
            <div>
                <a href="http://sailjs.com/">sails.js</a>
                <div>tutorial by irl nathan, with a bunch of help from code</div>
            </div>
        </footer>
    </div>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/vendor/angular-bootstrap/ui-bootstrap-tpls.js"></script>
    <script src="/vendor/angular-socket-io/socket.js"></script>
    <script src="/vendor/angular/angular.js"></script>
    <script src="/vendor/bootstrap/bootstrap.js"></script>
    <script src="/vendor/jquery/jquery.js"></script>
    <script src="/vendor/socket.io-client/bin/builder.js"></script>
    <script src="/vendor/socket.io-client/dist/socket.io.js"></script>
    <script src="/vendor/socket.io-client/dist/socket.io.min.js"></script>
    <script src="/vendor/socket.io-client/lib/events.js"></script>
    <script src="/vendor/socket.io-client/lib/io.js"></script>
    <script src="/vendor/socket.io-client/lib/json.js"></script>
    <script src="/vendor/socket.io-client/lib/namespace.js"></script>
    <script src="/vendor/socket.io-client/lib/parser.js"></script>
    <script src="/vendor/socket.io-client/lib/socket.js"></script>
    <script src="/vendor/socket.io-client/lib/transport.js"></script>
    <script src="/vendor/socket.io-client/lib/transports/flashsocket.js"></script>
    <script src="/vendor/socket.io-client/lib/transports/htmlfile.js"></script>
    <script src="/vendor/socket.io-client/lib/transports/jsonp-polling.js"></script>
    <script src="/vendor/socket.io-client/lib/transports/websocket.js"></script>
    <script src="/vendor/socket.io-client/lib/transports/xhr-polling.js"></script>
    <script src="/vendor/socket.io-client/lib/transports/xhr.js"></script>
    <script src="/vendor/socket.io-client/lib/util.js"></script>
    <script src="/vendor/socket.io-client/lib/vendor/web-socket-js/swfobject.js"></script>
    <script src="/vendor/socket.io-client/lib/vendor/web-socket-js/web_socket.js"></script>
    <script src="/vendor/socket.io-client/support/should.js"></script>
    <script src="/vendor/socket.io-client/support/test-runner/app.js"></script>
    <script src="/vendor/socket.io-client/support/test-runner/public/javascript/jquery.js"></script>
    <script src="/vendor/socket.io-client/support/test-runner/public/javascript/runner.js"></script>
    <script src="/vendor/socket.io-client/support/test-runner/public/javascript/script.js"></script>
    <script src="/vendor/socket.io-client/test/events.test.js"></script>
    <script src="/vendor/socket.io-client/test/io.test.js"></script>
    <script src="/vendor/socket.io-client/test/node/builder.common.js"></script>
    <script src="/vendor/socket.io-client/test/node/builder.test.js"></script>
    <script src="/vendor/socket.io-client/test/parser.test.js"></script>
    <script src="/vendor/socket.io-client/test/socket.test.js"></script>
    <script src="/vendor/socket.io-client/test/util.test.js"></script>
    <script src="/vendor/socket.io-client/test/worker.js"></script>
    <script src="/js/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
